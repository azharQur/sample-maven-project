import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"google": {
				"alias": {
					"": {
						"config":     {},
						"references": {},
						"version":    "",
					},
				},
				"config":     {},
				"references": {},
				"version":    "",
			},
		},
		"resources": {
			"google_compute_instance": {
				"default": {
					"config": {
						"boot_disk": [
							{
								"initialize_params": [
									{
										"image": "debian-cloud/debian-11",
										"labels": {
											"my_label": "value",
										},
									},
								],
							},
						],
						"machine_type": "e2-micro",
						"metadata": {
							"foo": "bar",
						},
						"name": "test",
						"network_interface": [
							{
								"access_config": [
									{},
								],
								"network": "default",
							},
						],
						"project": "prj-c-tfe-ba9a",
						"scratch_disk": [
							{
								"interface": "SCSI",
							},
						],
						"service_account": [
							{
								"email": "project-service-account@prj-c-tfe-ba9a.iam.gserviceaccount.com",
								"scopes": [
									"cloud-platform",
								],
							},
						],
						"tags": [
							"foo",
							"bar",
						],
						"zone": "northamerica-northeast2-a",
					},
					"provisioners": null,
					"references": {
						"boot_disk": [
							{
								"initialize_params": [
									{
										"image":  [],
										"labels": [],
									},
								],
							},
						],
						"machine_type": [],
						"metadata":     [],
						"name":         [],
						"network_interface": [
							{
								"access_config": [
									{},
								],
								"network": [],
							},
						],
						"project": [],
						"scratch_disk": [
							{
								"interface": [],
							},
						],
						"service_account": [
							{
								"email":  [],
								"scopes": [],
							},
						],
						"tags": [],
						"zone": [],
					},
				},
			},
		},
		"variables": {},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
